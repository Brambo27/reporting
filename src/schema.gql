# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Order {
  uuid: ID!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type OrderDeleteResponse {
  uuid: ID
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OrderEdge {
  """The node containing the Order"""
  node: Order!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type OrderConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrderEdge!]!
}

type OrderAggregateGroupBy {
  uuid: ID
}

type OrderCountAggregate {
  uuid: Int
}

type OrderMinAggregate {
  uuid: ID
}

type OrderMaxAggregate {
  uuid: ID
}

type OrderAggregateResponse {
  groupBy: OrderAggregateGroupBy
  count: OrderCountAggregate
  min: OrderMinAggregate
  max: OrderMaxAggregate
}

type Query {
  orderAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderAggregateFilter
  ): [OrderAggregateResponse!]!
  order(
    """The id of the record to find."""
    id: ID!
  ): Order!
  orders(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: OrderFilter! = {}

    """Specify to sort results."""
    sorting: [OrderSort!]! = []
  ): OrderConnection!
}

input OrderAggregateFilter {
  and: [OrderAggregateFilter!]
  or: [OrderAggregateFilter!]
  uuid: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input OrderFilter {
  and: [OrderFilter!]
  or: [OrderFilter!]
  uuid: IDFilterComparison
}

input OrderSort {
  field: OrderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderSortFields {
  uuid
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  createOneOrder(input: CreateOneOrderInput!): Order!
  createManyOrders(input: CreateManyOrdersInput!): [Order!]!
  updateOneOrder(input: UpdateOneOrderInput!): Order!
  updateManyOrders(input: UpdateManyOrdersInput!): UpdateManyResponse!
  deleteOneOrder(input: DeleteOneOrderInput!): OrderDeleteResponse!
  deleteManyOrders(input: DeleteManyOrdersInput!): DeleteManyResponse!
}

input CreateOneOrderInput {
  """The record to create"""
  order: CreateOrder!
}

input CreateOrder {
  uuid: ID!
}

input CreateManyOrdersInput {
  """Array of records to create"""
  orders: [CreateOrder!]!
}

input UpdateOneOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOrder!
}

input UpdateOrder {
  uuid: ID
}

input UpdateManyOrdersInput {
  """Filter used to find fields to update"""
  filter: OrderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOrder!
}

input OrderUpdateFilter {
  and: [OrderUpdateFilter!]
  or: [OrderUpdateFilter!]
  uuid: IDFilterComparison
}

input DeleteOneOrderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyOrdersInput {
  """Filter to find records to delete"""
  filter: OrderDeleteFilter!
}

input OrderDeleteFilter {
  and: [OrderDeleteFilter!]
  or: [OrderDeleteFilter!]
  uuid: IDFilterComparison
}